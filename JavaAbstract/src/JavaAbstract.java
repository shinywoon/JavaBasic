
abstract class A{
    public abstract int b();
    //본체가 있는 메소드는 abstract 키워드를 가질 수 없다.
    //public abstract int c(){System.out.println("Hello")}
    //추상 클래스 내에는 추상 메소드가 아닌 메소드가 존재 할 수 있다. 
    public void d(){
        System.out.println("world");
    }
}

// 상속
class B extends A{
	//오버라이딩
    public int b(){return 1;}
}

public class JavaAbstract {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		//Abstract => 추상
		//상속을 강제하는 일종의 규제
		// 추상 메소드
		
		  //A obj = new A();
		  // Error 발생
		//메소드 b의 선언 부분에는 abstract라는 키워드가 등장하고 있다. 
		//이 키워드는 메소드 b는 메소드의 시그니처만 정의 되어 있고 
		//이 메소드의 구체적인 구현은 하위 클래스에서 오버라이딩 해야 한다는 의미다.
		//이렇게 내용이 비어있는 메소드를 추상 메소드라고 부른다. 
		//추상 메소드를 하나라도 포함하고 있는 클래스는 추상 클래스가 되고, 
		//자연스럽게 클래스의 이름 앞에 abstract가 붙는다. 
		//아래와 같이 추상 클래스 A를 인스턴스화하면 오류가 발생한다. 
		//그것은 추상 클래스는 구체적인 메소드의 내용이 존재하지 않기 때문에 
		//인스턴스화시켜서 사용할 수 없기 때문이다. 
		B obj = new B();
        System.out.println(obj.b());
		//클래스 B는 클래스 A를 상속했다. 그리고 클래스 A의 추상 메소드인 메소드 b를 오버라이딩하고 있다. 
        //그 결과 클래스 A를 사용할 수 있었다.
        
        //추상 클래스를 사용하는 이유
        //추상 클래스는 상속을 강제하기 위한 것이다. 
        //즉 부모 클래스에는 메소드의 시그니처만 정의해놓고 그 메소드의 실제 동작 방법은 
        //이 메소드를 상속 받은 하위 클래스의 책임으로 위임하고 있다. 
        //사실 코드를 이런 식으로 작성하는 경우는 작은 규모의 프로젝트에서는 거의 없다. 
        
        //디자인 패턴
        //이러한 개발 방법을 template method pattern이라고도 한다. 
        //템플릿
        
       //템플릿은 자주 사용하는 모양을 모아둔 것이라고 할 수 있다. 
        //템플릿은 모양을 결정하지만 템플릿을 통해서 그려질 도형은 팬의 종류나 색상에 
        //따라서 달라진다. 
        //즉 공통분모인 메소드 run은 메소드 sum과 avg가 어떻게 동작할지 알 수 없지만 
        //sum이 실행되고 avg을 실행시킨다. 반면에 실행결과를 어떤 기호(+,-)로 시작할지는
        //하위 클래스에서 결정하고 있다.

        //즉, 위의 예제를 통해서도 알 수 있지만 프로그래밍이라는 것은 반복되는 패턴이 있다.
        //이런 패턴들을 모아서 정리한 것이 디자인 패턴(design pattern)이다. 
        //물론 시각 디자이너들의 디자인이 아니라 좋은 소프트웨어를 만들기 위한 
        //설계로서 디자인이라는 표현을 쓰고 있는 것이다. 
        //디자인 패턴의 장점은 크게 두가지이다. 
        //하나는 좋은 설계를 단기간에 학습할 수 있다는 점이다.
        //물론 비교적 단기간이라는 뜻이다. 
        //다른 하나는 소통에 도움이 된다는 점이다. 
        //설계 방법을 토의하거나 전달할 때 설계 방법에 따라 적절한 이름이 있다면 
        //상호간에 생각을 일치시키는 데 큰 도움이 될 것이다.
        
	}

}
